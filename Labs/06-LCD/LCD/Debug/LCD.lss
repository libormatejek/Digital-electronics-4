
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000005f8  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800132  00800132  000006be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ed  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ab  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ab  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f1  00000000  00000000  0000383b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
};

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(12, 1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc('D');
 212:	84 e4       	ldi	r24, 0x44	; 68
 214:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(13, 1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('E');
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(14, 1);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	8e e0       	ldi	r24, 0x0E	; 14
 22a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('2');
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	0a e2       	ldi	r16, 0x2A	; 42
 240:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 42; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 242:	89 91       	ld	r24, Y+
 244:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	lcd_gotoxy(14, 1);
	lcd_putc('2');
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 42; i++)
 248:	c0 17       	cp	r28, r16
 24a:	d1 07       	cpc	r29, r17
 24c:	d1 f7       	brne	.-12     	; 0x242 <main+0x4e>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	 
	

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms();
 254:	e1 eb       	ldi	r30, 0xB1	; 177
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	87 60       	ori	r24, 0x07	; 7
 25c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 25e:	e0 e7       	ldi	r30, 0x70	; 112
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter0 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	TIM0_overflow_16ms();
 268:	85 b5       	in	r24, 0x25	; 37
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	85 bd       	out	0x25, r24	; 37
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	85 60       	ori	r24, 0x05	; 5
 272:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 274:	ee e6       	ldi	r30, 0x6E	; 110
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 27e:	78 94       	sei
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x8c>

00000282 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <__vector_9+0x28>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <__vector_9+0x2a>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
	static uint8_t secs = 0;		// First number of seconds
	static uint8_t Second_secs = 0; // Second number of seconds
	static uint8_t min = 0;			// First number of minutes
	static uint8_t Second_min = 0;	// Second number of minutes
	static uint8_t square = 0;    		// Secs for square
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	90 e2       	ldi	r25, 0x20	; 32
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	89 83       	std	Y+1, r24	; 0x01
	char buff[2] = "  ";
 2b8:	9c 83       	std	Y+4, r25	; 0x04
 2ba:	8b 83       	std	Y+3, r24	; 0x03
	number_of_overflows++;
 2bc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <number_of_overflows.2083>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <number_of_overflows.2083>
	number_of_overflows2++;
 2c6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <number_of_overflows2.2084>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (number_of_overflows2 >=60 )
 2cc:	8c 33       	cpi	r24, 0x3C	; 60
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_9+0x54>
	static uint8_t Second_min = 0;	// Second number of minutes
	static uint8_t square = 0;    		// Secs for square
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
	char buff[2] = "  ";
	number_of_overflows++;
	number_of_overflows2++;
 2d0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <number_of_overflows2.2084>
 2d4:	37 c0       	rjmp	.+110    	; 0x344 <__vector_9+0xc2>
	
	if (number_of_overflows2 >=60 )
	{
		number_of_overflows2=0;		//function of square 
 2d6:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <number_of_overflows2.2084>
		square++;
 2da:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <square.2090>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
		if(square >= 60) 
 2e0:	8c 33       	cpi	r24, 0x3C	; 60
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <__vector_9+0x68>
	number_of_overflows2++;
	
	if (number_of_overflows2 >=60 )
	{
		number_of_overflows2=0;		//function of square 
		square++;
 2e4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <square.2090>
 2e8:	1a c0       	rjmp	.+52     	; 0x31e <__vector_9+0x9c>
		if(square >= 60) 
		{
			square=0; 
 2ea:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <square.2090>
			lcd_gotoxy(12, 0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 2f6:	80 e3       	ldi	r24, 0x30	; 48
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(13, 0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 306:	80 e3       	ldi	r24, 0x30	; 48
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(14, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	8e e0       	ldi	r24, 0x0E	; 14
 312:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			}
		itoa(square*square, buff,10);
 31e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <square.2090>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	be 01       	movw	r22, r28
 326:	6d 5f       	subi	r22, 0xFD	; 253
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	88 9f       	mul	r24, r24
 32c:	c0 01       	movw	r24, r0
 32e:	11 24       	eor	r1, r1
 330:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		lcd_gotoxy(11, 0);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8b e0       	ldi	r24, 0x0B	; 11
 338:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(buff);
 33c:	ce 01       	movw	r24, r28
 33e:	03 96       	adiw	r24, 0x03	; 3
 340:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	}
	
	if (number_of_overflows >= 6)
 344:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <number_of_overflows.2083>
 348:	86 30       	cpi	r24, 0x06	; 6
 34a:	08 f4       	brcc	.+2      	; 0x34e <__vector_9+0xcc>
 34c:	8d c0       	rjmp	.+282    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 34e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <number_of_overflows.2083>
		
		tens ++;
 352:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tens.2085>
 356:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens > 9)
 358:	8a 30       	cpi	r24, 0x0A	; 10
 35a:	18 f4       	brcc	.+6      	; 0x362 <__vector_9+0xe0>
	if (number_of_overflows >= 6)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
		
		tens ++;
 35c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <tens.2085>
 360:	07 c0       	rjmp	.+14     	; 0x370 <__vector_9+0xee>
		if (tens > 9)
		{
			tens = 0;
 362:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <tens.2085>
			secs ++;
 366:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <secs.2086>
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <secs.2086>
		}
		if(secs > 9)
 370:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <secs.2086>
 374:	8a 30       	cpi	r24, 0x0A	; 10
 376:	38 f0       	brcs	.+14     	; 0x386 <__vector_9+0x104>
		{
			secs=0;
 378:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <secs.2086>
			Second_secs++;
 37c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Second_secs.2087>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Second_secs.2087>
		}
		if(Second_secs >= 6)
 386:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Second_secs.2087>
 38a:	86 30       	cpi	r24, 0x06	; 6
 38c:	38 f0       	brcs	.+14     	; 0x39c <__vector_9+0x11a>
		{
			Second_secs=0;
 38e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Second_secs.2087>
			min++;
 392:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <min.2088>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <min.2088>
		}
		if(min >= 9)
 39c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <min.2088>
 3a0:	89 30       	cpi	r24, 0x09	; 9
 3a2:	38 f0       	brcs	.+14     	; 0x3b2 <__vector_9+0x130>
		{
			min=0;
 3a4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <min.2088>
			Second_min++;
 3a8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Second_min.2089>
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Second_min.2089>
		}
		if(Second_min >= 6)
 3b2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Second_min.2089>
 3b6:	86 30       	cpi	r24, 0x06	; 6
 3b8:	10 f0       	brcs	.+4      	; 0x3be <__vector_9+0x13c>
		{
			Second_min=0;
 3ba:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Second_min.2089>
 3be:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tens.2085>
 3c2:	4a e0       	ldi	r20, 0x0A	; 10
 3c4:	be 01       	movw	r22, r28
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		}
		// Convert decimal value to string
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7, 0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	87 e0       	ldi	r24, 0x07	; 7
 3d4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3e0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <secs.2086>
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	be 01       	movw	r22, r28
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		itoa(secs, lcd_string, 10);
		lcd_gotoxy(5, 0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3fa:	ce 01       	movw	r24, r28
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 402:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Second_secs.2087>
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	be 01       	movw	r22, r28
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		itoa(Second_secs, lcd_string, 10);
		lcd_gotoxy(4, 0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 424:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <min.2088>
 428:	4a e0       	ldi	r20, 0x0A	; 10
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		itoa(min, lcd_string, 10);
		lcd_gotoxy(2, 0);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 446:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Second_min.2089>
 44a:	4a e0       	ldi	r20, 0x0A	; 10
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 c5 02 	call	0x58a	; 0x58a <__itoa_ncheck>
		itoa(Second_min, lcd_string, 10);
		lcd_gotoxy(1, 0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		
		
		
		
	}
}
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	static uint8_t character = 0;
	static uint8_t position = 0;
	static uint8_t overflow = 0;

	overflow++;
 4b8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <overflow.2100>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <overflow.2100>
	
	if(overflow == 2){
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <__vector_16+0x3e>
		character++;
 4c6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <character.2098>
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <character.2098>
		overflow=0;
 4d0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <overflow.2100>
	}
	if (character == 5)
 4d4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <character.2098>
 4d8:	85 30       	cpi	r24, 0x05	; 5
 4da:	e1 f5       	brne	.+120    	; 0x554 <__vector_16+0xbe>
	{
		character = 0;
 4dc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <character.2098>
		position++;
 4e0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
		if (position == 6)
 4e6:	86 30       	cpi	r24, 0x06	; 6
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <__vector_16+0x5a>
		overflow=0;
	}
	if (character == 5)
	{
		character = 0;
		position++;
 4ea:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 4ee:	32 c0       	rjmp	.+100    	; 0x554 <__vector_16+0xbe>
		if (position == 6)
		{
			position = 0;
 4f0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
			lcd_gotoxy(1, 1);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 4fc:	80 e3       	ldi	r24, 0x30	; 48
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(2, 1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 50c:	80 e3       	ldi	r24, 0x30	; 48
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(3, 1);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(4, 1);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 52c:	80 e3       	ldi	r24, 0x30	; 48
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(5, 1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	85 e0       	ldi	r24, 0x05	; 5
 538:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			lcd_gotoxy(6, 1);
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(" ");
 54c:	80 e3       	ldi	r24, 0x30	; 48
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
			
		}
		
	}
	
	lcd_gotoxy(1 + position, 1);
 554:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(character);
 560:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <character.2098>
 564:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
	
	
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__itoa_ncheck>:
 58a:	bb 27       	eor	r27, r27
 58c:	4a 30       	cpi	r20, 0x0A	; 10
 58e:	31 f4       	brne	.+12     	; 0x59c <__itoa_ncheck+0x12>
 590:	99 23       	and	r25, r25
 592:	22 f4       	brpl	.+8      	; 0x59c <__itoa_ncheck+0x12>
 594:	bd e2       	ldi	r27, 0x2D	; 45
 596:	90 95       	com	r25
 598:	81 95       	neg	r24
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__utoa_common>

000005a0 <__utoa_ncheck>:
 5a0:	bb 27       	eor	r27, r27

000005a2 <__utoa_common>:
 5a2:	fb 01       	movw	r30, r22
 5a4:	55 27       	eor	r21, r21
 5a6:	aa 27       	eor	r26, r26
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	aa 1f       	adc	r26, r26
 5ae:	a4 17       	cp	r26, r20
 5b0:	10 f0       	brcs	.+4      	; 0x5b6 <__utoa_common+0x14>
 5b2:	a4 1b       	sub	r26, r20
 5b4:	83 95       	inc	r24
 5b6:	50 51       	subi	r21, 0x10	; 16
 5b8:	b9 f7       	brne	.-18     	; 0x5a8 <__utoa_common+0x6>
 5ba:	a0 5d       	subi	r26, 0xD0	; 208
 5bc:	aa 33       	cpi	r26, 0x3A	; 58
 5be:	08 f0       	brcs	.+2      	; 0x5c2 <__utoa_common+0x20>
 5c0:	a9 5d       	subi	r26, 0xD9	; 217
 5c2:	a1 93       	st	Z+, r26
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	79 f7       	brne	.-34     	; 0x5a6 <__utoa_common+0x4>
 5c8:	b1 11       	cpse	r27, r1
 5ca:	b1 93       	st	Z+, r27
 5cc:	11 92       	st	Z+, r1
 5ce:	cb 01       	movw	r24, r22
 5d0:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <strrev>

000005d4 <strrev>:
 5d4:	dc 01       	movw	r26, r24
 5d6:	fc 01       	movw	r30, r24
 5d8:	67 2f       	mov	r22, r23
 5da:	71 91       	ld	r23, Z+
 5dc:	77 23       	and	r23, r23
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <strrev+0x4>
 5e0:	32 97       	sbiw	r30, 0x02	; 2
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <strrev+0x18>
 5e4:	7c 91       	ld	r23, X
 5e6:	6d 93       	st	X+, r22
 5e8:	70 83       	st	Z, r23
 5ea:	62 91       	ld	r22, -Z
 5ec:	ae 17       	cp	r26, r30
 5ee:	bf 07       	cpc	r27, r31
 5f0:	c8 f3       	brcs	.-14     	; 0x5e4 <strrev+0x10>
 5f2:	08 95       	ret

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
