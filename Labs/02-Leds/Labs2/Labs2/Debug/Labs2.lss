
Labs2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * when a push button is pressed.
 */
int main(void)
{
	// Set pin as output in Data Direction Register...
		DDRB = DDRB | (1<<LED_01);
  80:	21 9a       	sbi	0x04, 1	; 4
	// ...and turn LED off in Data Register
		PORTB = PORTB & ~(1<<LED_01);
  82:	29 98       	cbi	0x05, 1	; 5
	// Set pin as output in Data Direction Register...
		DDRB = DDRB | (1<<LED_02);
  84:	22 9a       	sbi	0x04, 2	; 4
	// ...and turn LED off in Data Register
		PORTB = PORTB & ~(1<<LED_02);
  86:	2a 98       	cbi	0x05, 2	; 5
	// Set pin as output in Data Direction Register...
		DDRB = DDRB | (1<<LED_03);
  88:	23 9a       	sbi	0x04, 3	; 4
	// ...and turn LED off in Data Register
		PORTB = PORTB & ~(1<<LED_03);
  8a:	2b 98       	cbi	0x05, 3	; 5
	// Set pin as output in Data Direction Register...
		DDRB = DDRB | (1<<LED_04);
  8c:	24 9a       	sbi	0x04, 4	; 4
	// ...and turn LED off in Data Register
		PORTB = PORTB & ~(1<<LED_04);
  8e:	2c 98       	cbi	0x05, 4	; 5
	// Set pin as output in Data Direction Register...
		DDRB = DDRB | (1<<LED_05);
  90:	25 9a       	sbi	0x04, 5	; 4
	// ...and turn LED off in Data Register
		PORTB = PORTB & ~(1<<LED_05);
  92:	2d 98       	cbi	0x05, 5	; 5
	//set pin as input in Data Direction Register
	
	//button with pullup ressistor 
	DDRD = DDRD  & ~(1<<BTN);
  94:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  96:	58 9a       	sbi	0x0b, 0	; 11
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);
		if (bit_is_clear(PIND, BTN));
	{
        // WRITE YOUR CODE HERE
	PORTB = PORTB ^ (1<<LED_01);
  98:	52 e0       	ldi	r21, 0x02	; 2
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_01);
	PORTB = PORTB ^ (1<<LED_02);
  9a:	24 e0       	ldi	r18, 0x04	; 4
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_02);
	PORTB = PORTB ^ (1<<LED_03);
  9c:	98 e0       	ldi	r25, 0x08	; 8
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_03);
	PORTB = PORTB ^ (1<<LED_04);
  9e:	80 e1       	ldi	r24, 0x10	; 16
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_04);
	PORTB = PORTB ^ (1<<LED_05);
  a0:	40 e2       	ldi	r20, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	64 e3       	ldi	r22, 0x34	; 52
  a6:	7c e0       	ldi	r23, 0x0C	; 12
  a8:	31 50       	subi	r19, 0x01	; 1
  aa:	60 40       	sbci	r22, 0x00	; 0
  ac:	70 40       	sbci	r23, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
    // Infinite loop
    while (1)
{
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);
		if (bit_is_clear(PIND, BTN));
  b4:	39 b1       	in	r19, 0x09	; 9
	{
        // WRITE YOUR CODE HERE
	PORTB = PORTB ^ (1<<LED_01);
  b6:	35 b1       	in	r19, 0x05	; 5
  b8:	35 27       	eor	r19, r21
  ba:	35 b9       	out	0x05, r19	; 5
  bc:	3f ef       	ldi	r19, 0xFF	; 255
  be:	64 e3       	ldi	r22, 0x34	; 52
  c0:	7c e0       	ldi	r23, 0x0C	; 12
  c2:	31 50       	subi	r19, 0x01	; 1
  c4:	60 40       	sbci	r22, 0x00	; 0
  c6:	70 40       	sbci	r23, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_01);
  ce:	35 b1       	in	r19, 0x05	; 5
  d0:	35 27       	eor	r19, r21
  d2:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_02);
  d4:	35 b1       	in	r19, 0x05	; 5
  d6:	32 27       	eor	r19, r18
  d8:	35 b9       	out	0x05, r19	; 5
  da:	3f ef       	ldi	r19, 0xFF	; 255
  dc:	64 e3       	ldi	r22, 0x34	; 52
  de:	7c e0       	ldi	r23, 0x0C	; 12
  e0:	31 50       	subi	r19, 0x01	; 1
  e2:	60 40       	sbci	r22, 0x00	; 0
  e4:	70 40       	sbci	r23, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x60>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_02);
  ec:	35 b1       	in	r19, 0x05	; 5
  ee:	32 27       	eor	r19, r18
  f0:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_03);
  f2:	35 b1       	in	r19, 0x05	; 5
  f4:	39 27       	eor	r19, r25
  f6:	35 b9       	out	0x05, r19	; 5
  f8:	3f ef       	ldi	r19, 0xFF	; 255
  fa:	64 e3       	ldi	r22, 0x34	; 52
  fc:	7c e0       	ldi	r23, 0x0C	; 12
  fe:	31 50       	subi	r19, 0x01	; 1
 100:	60 40       	sbci	r22, 0x00	; 0
 102:	70 40       	sbci	r23, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x7e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x88>
 108:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_03);
 10a:	35 b1       	in	r19, 0x05	; 5
 10c:	39 27       	eor	r19, r25
 10e:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_04);
 110:	35 b1       	in	r19, 0x05	; 5
 112:	38 27       	eor	r19, r24
 114:	35 b9       	out	0x05, r19	; 5
 116:	3f ef       	ldi	r19, 0xFF	; 255
 118:	64 e3       	ldi	r22, 0x34	; 52
 11a:	7c e0       	ldi	r23, 0x0C	; 12
 11c:	31 50       	subi	r19, 0x01	; 1
 11e:	60 40       	sbci	r22, 0x00	; 0
 120:	70 40       	sbci	r23, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x9c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xa6>
 126:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_04);
 128:	35 b1       	in	r19, 0x05	; 5
 12a:	38 27       	eor	r19, r24
 12c:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_05);
 12e:	35 b1       	in	r19, 0x05	; 5
 130:	34 27       	eor	r19, r20
 132:	35 b9       	out	0x05, r19	; 5
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	64 e3       	ldi	r22, 0x34	; 52
 138:	7c e0       	ldi	r23, 0x0C	; 12
 13a:	31 50       	subi	r19, 0x01	; 1
 13c:	60 40       	sbci	r22, 0x00	; 0
 13e:	70 40       	sbci	r23, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xba>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xc4>
 144:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_04);
 146:	35 b1       	in	r19, 0x05	; 5
 148:	38 27       	eor	r19, r24
 14a:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_05);
 14c:	35 b1       	in	r19, 0x05	; 5
 14e:	34 27       	eor	r19, r20
 150:	35 b9       	out	0x05, r19	; 5
 152:	3f ef       	ldi	r19, 0xFF	; 255
 154:	64 e3       	ldi	r22, 0x34	; 52
 156:	7c e0       	ldi	r23, 0x0C	; 12
 158:	31 50       	subi	r19, 0x01	; 1
 15a:	60 40       	sbci	r22, 0x00	; 0
 15c:	70 40       	sbci	r23, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xd8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xe2>
 162:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_03);
 164:	35 b1       	in	r19, 0x05	; 5
 166:	39 27       	eor	r19, r25
 168:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_04);
 16a:	35 b1       	in	r19, 0x05	; 5
 16c:	38 27       	eor	r19, r24
 16e:	35 b9       	out	0x05, r19	; 5
 170:	3f ef       	ldi	r19, 0xFF	; 255
 172:	64 e3       	ldi	r22, 0x34	; 52
 174:	7c e0       	ldi	r23, 0x0C	; 12
 176:	31 50       	subi	r19, 0x01	; 1
 178:	60 40       	sbci	r22, 0x00	; 0
 17a:	70 40       	sbci	r23, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xf6>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x100>
 180:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_02);
 182:	35 b1       	in	r19, 0x05	; 5
 184:	32 27       	eor	r19, r18
 186:	35 b9       	out	0x05, r19	; 5
	PORTB = PORTB ^ (1<<LED_03);
 188:	35 b1       	in	r19, 0x05	; 5
 18a:	39 27       	eor	r19, r25
 18c:	35 b9       	out	0x05, r19	; 5
 18e:	3f ef       	ldi	r19, 0xFF	; 255
 190:	64 e3       	ldi	r22, 0x34	; 52
 192:	7c e0       	ldi	r23, 0x0C	; 12
 194:	31 50       	subi	r19, 0x01	; 1
 196:	60 40       	sbci	r22, 0x00	; 0
 198:	70 40       	sbci	r23, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x114>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x11e>
 19e:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB ^ (1<<LED_02);
 1a0:	35 b1       	in	r19, 0x05	; 5
 1a2:	32 27       	eor	r19, r18
 1a4:	35 b9       	out	0x05, r19	; 5
 1a6:	7d cf       	rjmp	.-262    	; 0xa2 <main+0x22>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
